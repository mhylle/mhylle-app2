name: Deploy App2 to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate Dockerfile syntax
        run: |
          docker build --no-cache -f frontend/Dockerfile -t test-frontend . || echo "Frontend Dockerfile needs adjustment"
          docker build --no-cache -f backend/Dockerfile -t test-backend . || echo "Backend Dockerfile needs adjustment"
      
      - name: Configuration check
        run: |
          echo "✅ Repository structure validated"
          echo "✅ Deployment configuration ready"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/mhylle/projects/mhylle.com
            
            # Deploy using the deployment script
            ./scripts/deploy-app.sh app2 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            
            # Wait a moment for containers to start
            sleep 10
            
            # Verify deployment health
            ./scripts/health-check.sh app2

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ App2 deployment successful!"
            echo "Frontend: https://mhylle.com/app2/"
            echo "API: https://mhylle.com/api/app2/"
          else
            echo "❌ App2 deployment failed!"
            exit 1
          fi

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend/Dockerfile'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
      
      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend/Dockerfile'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

  performance-test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    name: Performance Test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 30
      
      - name: Test application endpoints
        run: |
          # Test frontend
          curl -f -I https://mhylle.com/app2/ || exit 1
          
          # Test API health
          curl -f -I https://mhylle.com/api/app2/health || exit 1
          
          # Test API endpoints
          curl -f -I https://mhylle.com/api/app2/tasks || exit 1
          
          echo "✅ All endpoints are responding correctly"
